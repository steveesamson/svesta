import{w as T}from"./index.QQ03Fvmf.js";import{f as y}from"./scheduler.-UmcUhha.js";import{_}from"./preload-helper.0HuHagjb.js";const g=new Map,b=e=>{if(g.has(e))return g.get(e);const t=T({type:e,data:void 0,error:void 0}),n={is(o){const{data:i}=y(t);return i===o},value(){return{...y(t)}},setTo(o){t.set({type:e,data:o})},clear(){t.set({type:e})},error(o){t.set({type:e,error:o})},subscribe(o){return t.subscribe(i=>{i&&o(i)})}};return g.set(e,n),n},L=T(!0),m=()=>{navigator.onLine?(console.log("online"),L.set(!0),location.reload()):(console.log("offline"),L.set(!1))},S={isOnline(){return y(L)},register(){return window.addEventListener("online",m),window.addEventListener("offline",m),()=>{window.removeEventListener("online",m),window.removeEventListener("offline",m)}}},I=async e=>{try{const t=await _(()=>import("./index.5Jz4PfUi.js"),__vite__mapDeps([]),import.meta.url),{io:n}=t,{BASE_URL:o,DEBUG:i}=e.config,a=n(`${o}`,{transports:["websocket"]});return a.on("connect",function(){e.sync=function(l,f,d){return new Promise(u=>{try{a.emit(f,{path:l,data:d},r=>{const{status:h,body:E}=r,w={status:h,...E||{}};i&&console.log("IO: ","result: ",r,"path: ",l,"method: ",f," args: ",d),u(w)})}catch(r){i&&console.log("IO: ","error: ",r.toString(),"path: ",l,"method: ",f," args: ",d),u({error:r.toString(),status:500})}})}}),a.on("comets",e.onComets),a}catch(t){console.log("RealTime initialization error: ",t)}},O=b("loading");let c={BASE_URL:"",DEBUG:!1,realTime:!1,fetch:typeof window>"u"?void 0:window.fetch,init:{method:"GET",mode:"cors",credentials:"same-origin",headers:{"Content-Type":"application/json; charset=UTF-8"}}},p=null;const v=async(e,t,n=void 0)=>{if(!S.isOnline())return Promise.resolve({error:"You seem to be offline :)",status:500});const{BASE_URL:o,init:i}=c;let{fetch:a}=c;if(o||console.warn("You did not set the BASE_URL on Transport before invoking methods. I hope this is deliberate and you are passing url as FQDN plus paths."),!a&&typeof window<"u"&&(a=window.fetch),!a)return Promise.resolve({error:"You seem to be invoking methods on Transport from server; pass down fetch from your view +page.[t/j]s :)",status:500});const l=["post","put"].includes(t.toLowerCase());l||(e=n?[e,new URLSearchParams(n).toString()].join("?"):e);const f=`${o}${e}`,d=l?JSON.stringify(n||{}):void 0;O.setTo(!0);try{const u={...i,method:t,body:d},r=await a(f,u),h=r.status;if(!r.ok){const w=await r.text();return console.log("Error: ",w),{error:w,status:h}}return{...await r.json(),status:h}}catch(u){const r=u.toString();return console.log("Fetch error: ",r),{error:"Fetch error",status:500}}},s={isOnline:!1,cometListeners:{},config:c,configure(e){c={...c,...e}},fetch:v,sync:v,destroy(){s.sync=v,p=null},async switchToRealTime(){const{realTime:e}=c;e&&!p&&(p=I(s))},onCometsNotify(e){const t=s.cometListeners[e.store]||[];t.find(n=>n.listenerID===e.listenerID)||(t.push(e),s.cometListeners[e.store]=t)},stopCometsOn(e){const t=s.cometListeners[e.store]||[];if(!t.length)return;const n=t.filter(o=>o.listenerID!==e.listenerID);s.cometListeners[e.store]=n},onComets(e){const{DEBUG:t}=c;t&&console.log("IO: ","oncomets: ",e.room,e.verb,e.data);const n=s.cometListeners[e.room]||[];n.length&&n.forEach(o=>o.onComets(e))},async upload(e,t){return await s.fetch(e,"POST",t)},async post(e,t){return await s.fetch(e,"post",t)},async get(e,t){return await s.fetch(e,"get",t)},async patch(e,t){return await s.fetch(e,"patch",t)},async put(e,t){return await s.fetch(e,"put",t)},async options(e,t){return await s.fetch(e,"options",t)},async delete(e,t){return await s.fetch(e,"delete",t)}};export{s as T};
function __vite__mapDeps(indexes) {
  if (!__vite__mapDeps.viteFileDeps) {
    __vite__mapDeps.viteFileDeps = []
  }
  return indexes.map((i) => __vite__mapDeps.viteFileDeps[i])
}
